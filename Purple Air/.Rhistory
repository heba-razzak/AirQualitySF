mapview(pa_city)
# Create a spatial plot of the filtered polygons, with colors based on the number of purple-air filters
pa_world1 %>%
ggplot(aes(fill = pa_count)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "magma")
# create an interactive map of the filtered polygons and their associated purple-air filters
mapview(pa_world1)
# Create a bar plot showing the total number of purple-air filters per state
ggplot(PA_by_state, aes(x = State, y = pa_count)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("State") +
ylab("Number of PAs") +
ggtitle("Total Number of PAs per State")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Calculate the total number of purple-air filters per state using the new data frame
PA_by_state <- aggregate(pa_count ~ State, split_pa_city, sum)
# Create a bar plot showing the total number of purple-air filters per state
ggplot(PA_by_state, aes(x = State, y = pa_count)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("State") +
ylab("Number of PAs") +
ggtitle("Total Number of PAs per State")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Convert the 'State' column in 'PA_by_state' to lowercase
# remove any leading/trailing white space
# select only the 'region' and 'pa_count' columns
PA_by_state <- PA_by_state %>%
mutate(region = tolower(trimws(State))) %>%
select(region, pa_count)
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_data("state") %>%
left_join(PA_by_state, by = "region") %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_count)) +
geom_polygon() +
coord_map() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
PA_by_state
PA_by_state
arrange(PA_by_state, pa_count)
PA_by_state$pa_intervals <- cut(PA_by_state$pa_count, breaks = c(0, 4, 10, 20, 50, 100, 300, 4000),
labels = c("0", "4", "10", "20", "50", "100", "300", "4000"))
PA_by_state$pa_intervals <- cut(PA_by_state$pa_count, breaks = c(0, 4, 10, 20, 50, 100, 300, 4000),
labels = c( "4", "10", "20", "50", "100", "300", "4000"))
PA_by_state
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_data("state") %>%
left_join(PA_by_state, by = "region") %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_data("state") %>%
left_join(PA_by_state, by = "region") %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_data("state") %>%
left_join(PA_by_state, by = "region") %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("white", "pink", "red", "purple", "blue", "green", "black")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
PA_by_state
PA_by_state
PA_by_state$pa_intervals <- cut(PA_by_state$pa_count, breaks = c(0, 4, 10, 20, 50, 100, 300, 4000),
labels = c( "0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "300-4000"))
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_data("state") %>%
left_join(PA_by_state, by = "region") %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("white", "pink", "red", "purple", "blue", "green", "black")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
PA_by_state
map_data("state") %>%
left_join(PA_by_state, by = "region")
j = map_data("state") %>%
left_join(PA_by_state, by = "region")
map_purple_airs = map_data("state") %>%
left_join(PA_by_state, by = "region")
map_purple_airs
map_purple_airs[region=="california"]
map_purple_airs[map_purple_airs$region=="california"]
map_purple_airs[map_purple_airs$region=="california",]
map_purple_airs
mutate(pa_intervals = ifelse(is.na(pa_intervals), "NA", pa_intervals))
PA_by_state %>% mutate(pa_intervals = ifelse(is.na(pa_intervals), "NA", pa_intervals))
map_purple_airs = map_data("state") %>%
left_join(PA_by_state, by = "region") %>%
map_purple_airs %>% mutate(pa_intervals = ifelse(is.na(pa_intervals), "NA", pa_intervals))
map_purple_airs = map_data("state") %>%
left_join(PA_by_state, by = "region") %>%
map_purple_airs %>% mutate(pa_intervals = ifelse(is.na(pa_intervals), "NA", pa_intervals))
map_purple_airs = map_data("state") %>%
left_join(PA_by_state, by = "region")
map_purple_airs %>% mutate(pa_intervals = ifelse(is.na(pa_intervals), "NA", pa_intervals))
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("white", "pink", "red", "purple", "blue", "green", "black")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("white", "pink", "red", "purple", "blue", "green", "black", "white")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("white", "pink", "red", "purple", "blue", "green", "black", "green")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
map_purple_airs = map_purple_airs %>% mutate(pa_intervals = ifelse(is.na(pa_intervals), "NA", pa_intervals))
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("white", "pink", "red", "purple", "blue", "green", "black", "black")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("white", "pink", "red", "purple", "blue", "green", "black", "white")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("light grey", "pink", "red", "purple", "blue", "green", "black", "white")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("light grey", "pink", "red", "purple", "blue", "green", "black", "white")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
PA_by_state$pa_intervals <- cut(PA_by_state$pa_count, breaks = c(0, 4, 10, 20, 50, 100, 300, 4000),
labels = c( "0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "300-4000"))
map_purple_airs = map_data("state") %>%
left_join(PA_by_state, by = "region")
map_purple_airs = map_purple_airs %>% mutate(pa_intervals = ifelse(is.na(pa_intervals), "NA", pa_intervals))
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("light grey", "pink", "red", "purple", "blue", "green", "black", "white")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
PA_by_state
map_purple_airs
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals))
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map()
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("light grey", "pink", "red", "purple", "blue", "green", "black", "white")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("light grey", "pink", "red", "purple", "blue", "green", "black", "white"),
breaks = c(0, 50, 100, 150, 200, 250, 300, 350),
labels = c("0-50", "51-100", "101-150", "151-200", "201-250", "251-300", "301-350", ">350")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("light grey", "pink", "red", "purple", "blue", "green", "black", "white"),
# breaks = c(0, 50, 100, 150, 200, 250, 300, 350),
labels = c("0-50", "51-100", "101-150", "151-200", "201-250", "251-300", "301-350", ">350")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("light grey", "pink", "red", "purple", "blue", "green", "black", "white"),
labels = c("0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "300-4000")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("light grey", "pink", "red", "purple", "blue", "green", "black", "white"),
labels = c("0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "3700+")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("#E8E6FF", "#C5C3FF", "#A2A0FF", "purple", "blue", "green", "black", "white"),
labels = c("0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "3700+")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("#E8E6FF", "#C5C3FF", "#A2A0FF", "#7F7DFF", "blue", "green", "black", "white"),
labels = c("0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "3700+")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("#E8E6FF", "#C5C3FF", "#A2A0FF", "#7F7DFF", "#5C5AFF", "green", "black", "white"),
labels = c("0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "3700+")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("#E8E6FF", "#C5C3FF", "#A2A0FF", "#7F7DFF", "#5C5AFF", "#3936FF", "#1A1AE5", "white"),
labels = c("0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "3700+")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("#E8E6FF", "#C5C3FF", "#A2A0FF", "#7F7DFF", "#5C5AFF", "#3936FF", "#000000", "white"),
labels = c("0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "3700+")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
arrange(PA_by_state, pa_count)
# Calculate the total number of purple-air filters per state using the new data frame
PA_by_state <- aggregate(pa_count ~ State, split_pa_city, sum)
# Convert the 'State' column in 'PA_by_state' to lowercase
# remove any leading/trailing white space
# select only the 'region' and 'pa_count' columns
PA_by_state <- PA_by_state %>%
mutate(region = tolower(trimws(State))) %>%
select(region, pa_count)
arrange(PA_by_state, pa_count)
quantiles <- quantile(df$pa_count, probs = seq(0, 1, length.out = 9))
quantiles <- quantile(PA_by_state$pa_count, probs = seq(0, 1, length.out = 9))
quantiles
PA_by_state %>%
mutate(pa_intervals = cut(pa_count, breaks = quartiles, labels = c("Low", "Medium-Low", "Medium", "Medium-High", "High"), include.lowest = TRUE))
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("#E8E6FF", "#C5C3FF", "#A2A0FF", "#7F7DFF", "#5C5AFF", "#3936FF", "#3a3898", "white"),
labels = c("0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "3700+")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("#E8E6FF", "#C5C3FF", "#A2A0FF", "#7F7DFF", "#5C5AFF", "#4443c7", "#2b2a6f", "white"),
labels = c("0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "3700+")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("#E8E6FF", "#C5C3FF", "#A2A0FF", "#7F7DFF", "#5C5AFF", "#3736a2", "#272771", "white"),
labels = c("0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "3700+")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
# Load the 'state' map data and join it with the 'PA_by_state' df
# to visualize the number of PAs by state
map_purple_airs %>%
ggplot(aes(x = long, y = lat, group = group, fill = pa_intervals)) +
geom_polygon() +
coord_map() +
scale_fill_manual(values = c("#E8E6FF", "#C5C3FF", "#A2A0FF", "#7F7DFF", "#5C5AFF", "#4847cb", "#272771", "white"),
labels = c("0-4", "4-10", "10-20", "20-50", "50-100", "100-300", "3700+")) +
# scale_fill_gradient(low = "white", high = "red") +
labs(title = "Number of PAs by State")
library(tidycensus)
library(purrr)
library(dplyr)
# set working directory
dir = '/Users/heba/Desktop/Uni/Lim Lab/Purple Air'
setwd(dir)
# Select year
yr = 2020
# set the API key for accessing the US Census Bureau API
census_api_key("180aa9b3eeb132e6db8aa2afb42e5d39728ffb52")
# preview fips_codes dataset from the tidycensus library
# fips_codes: state, state_code, state_name, county_code, county
head(tidycensus::fips_codes)
# Get a vector of the unique state codes and select the first 51 (i.e. the 50 states and Washington D.C.)
us <- unique(tidycensus::fips_codes$state)[1:51]
# Enable caching for faster data retrieval
options(tigris_use_cache = TRUE)
# Load ACS census data for selected year 2020
# "acs5": 2016 - 2020 5 year ACS variables
vars <- load_variables(yr, "acs5", cache = TRUE)
vars[vars$name %in% c("B03002_001","B03002_003","B03002_004","B03002_005","B03002_006","B03002_012"),]
# get race and population density ACS data at the block level
race.bg <- reduce(
map(us, function(x) {
get_acs(geography = "block group",
year = yr,
variables = c(nat = "B03002_005",
whi = "B03002_003", blk = "B03002_004",
azn = "B03002_006", his = "B03002_012"),
summary_var="B03002_001",
state = x,
survey = "acs5", geometry = TRUE)
}),
rbind
)
pop <- race.bg
# Filter the population data for the white race
pop.sf <- pop %>% filter(variable=="whi")
pop.sf <- pop.sf %>%
mutate(area = st_area(pop.sf)) %>%  # Calculate the area for each block group
mutate(dens = summary_est / area) %>%  # Calculate population density by dividing the population estimate by the area
mutate(pop5 = ntile(dens, 5)) %>%  # Create quantiles (5 bins) based on population density
filter(!is.na(pop5))  # Remove any rows with missing values
pop.sf
library(sf)
pop.sf <- pop.sf %>%
mutate(area = st_area(pop.sf)) %>%  # Calculate the area for each block group
mutate(dens = summary_est / area) %>%  # Calculate population density by dividing the population estimate by the area
mutate(pop5 = ntile(dens, 5)) %>%  # Create quantiles (5 bins) based on population density
filter(!is.na(pop5))  # Remove any rows with missing values
# select relevant columns
pop.sf <-  select(pop.sf, GEOID, area, dens, pop5, summary_est)
# set as data table
race <- setDT(race.bg)
library(data.table)
# set as data table
race <- setDT(race.bg)
# add quintile ranks to each race
blck.sf <- race %>% filter(variable=="blk")  %>% mutate(blkp=estimate/summary_est, blk5=ntile(blkp, 5)) %>% filter(!is.na(blk5)) %>% select(GEOID, blkp, blk5)
hisp.sf <- race %>% filter(variable=="his")  %>% mutate(hisp=estimate/summary_est, his5=ntile(hisp, 5)) %>% filter(!is.na(his5)) %>% select(GEOID, hisp, his5)
whit.sf <- race %>% filter(variable=="whi")  %>% mutate(whip=estimate/summary_est, whi5=ntile(whip, 5)) %>% filter(!is.na(whi5)) %>% select(GEOID, whip, whi5)
asia.sf <- race %>% filter(variable=="azn")  %>% mutate(asip=estimate/summary_est, asi5=ntile(asip, 5)) %>% filter(!is.na(asi5)) %>% select(GEOID, asip, asi5)
nati.sf <- race %>% filter(variable=="nat")  %>% mutate(natp=estimate/summary_est, nat5=ntile(natp, 5)) %>% filter(!is.na(nat5)) %>% select(GEOID, natp, nat5)
# data frames to be merged
data_frames <- list(blck.sf, whit.sf, hisp.sf, asia.sf, nati.sf)
# merge data frames
ss <- reduce(data_frames, merge, by = "GEOID")
View(pop.sf)
# save data
st_write(pop.sf, "census+sf.shp")
fwrite(ss, file="race.csv")
ss
blck.sf
vars[vars$name %in% c("B03002_001","B03002_003","B03002_004","B03002_005","B03002_006","B03002_012"),]
pop
pop.sf
race
pop.sf
blck.sf
head(pa_inside)
# Load required packages
library(tidycensus) # For accessing US Census data
library(tidyverse) # For data manipulation and visualization
library(units) # For working with physical units
library(rjson) # For working with JSON data
library(httr) # For making HTTP requests
library(sf) # For working with spatial data
library(data.table) # For data manipulation
library(rnaturalearth) # For accessing global map data
library(mapview) # For interactive maps
library(dplyr)
library(stringr)
library(shadowtext)# to create shadow on labels on map
library(leafsync) # combine mapview maps
# set working directory
dir = '/Users/heba/Desktop/Uni/Lim Lab/Purple Air'
setwd(dir)
# Enable caching for faster data retrieval
options(tigris_use_cache = TRUE)
# Get an sf object for all countries (sf: simple features, an object used to store spatial vector data)
all_countries <- ne_countries(scale = "medium", returnclass = "sf")
# Get a list of unique iso_a3 codes
iso_a3_list <- unique(all_countries$iso_a3)
# Loop over iso_a3 codes to create sf objects for each country
for (iso_a3 in iso_a3_list) {
# Filter the all_countries data by the iso_a3 code
country_data <- all_countries %>% filter(iso_a3 == iso_a3)
}
# Print the first few rows of the filtered data
head(country_data)
#sets the API key for accessing the US Census Bureau API
census_api_key("180aa9b3eeb132e6db8aa2afb42e5d39728ffb52")
# preview fips_codes dataset from the tidycensus library
# fips_codes: state, state_code, state_name, county_code, county
head(tidycensus::fips_codes)
# Get a vector of the unique state codes and select the first 51 (i.e. the 50 states and Washington D.C.)
us <- unique(tidycensus::fips_codes$state)[1:51]
# Store the URL of the API endpoint to request data from for PurpleAir air quality sensors
# location_type=0 outside
# location_type=1 inside
outside <- "https://api.purpleair.com/v1/sensors?fields=latitude%2C%20longitude%2C%20date_created&location_type=0"
inside <- "https://api.purpleair.com/v1/sensors?fields=latitude%2C%20longitude%2C%20date_created&location_type=1"
# Define the API key used to authenticate the user's request to the PurpleAir API
auth_key  <- "2C4E0A86-014A-11ED-8561-42010A800005"
# Define the header for the HTTP request to the API, including the API key and Accept content type
header = c(
'X-API-Key' = auth_key,
'Accept' = "application/json"
)
# get outside purpleair data
result <- GET(outside, add_headers(header))
raw <- rawToChar(result$content)
json <- jsonlite::fromJSON(raw)
pa_outside <- as.data.frame(json$data)
pa_outside$location <- 'outside'
head(pa_outside)
# get inside purpleair data
result <- GET(inside, add_headers(header))
raw <- rawToChar(result$content)
json <- jsonlite::fromJSON(raw)
pa_inside <- as.data.frame(json$data)
pa_inside$location <- 'inside'
head(pa_inside)
# Combine outside and inside purple air data
pa <- rbind(pa_inside, pa_outside)
# Overwrite the column names of the PurpleAir data frame with "ID", "Lat", "Lon", "Location"
colnames(pa) <- c("ID","Date Created", "Lat", "Lon", "Location")
# Remove any rows from the PurpleAir data frame that contain missing values
pa <- pa %>% na.omit()
# Convert the PurpleAir data frame to an sf object with "Lon" and "Lat" as the coordinate columns
dt <- st_as_sf(pa, coords=c("Lon", "Lat"))
# convert epoch timestamp to date
dt$`Date Created` <- as.Date(as.POSIXct(dt$`Date Created`, origin = "1970-01-01"))
# dt: ID (purpleAir ID), Location (inside/outside), geometry (Lat, Lon)
head(dt)
blck.sf
race.bg
ss
